package catz
import scala.meta._
import scalafix._
import scala.collection.immutable.Seq
import scalafix.util.Patch
import scalafix.util.TreePatch._
import org.scalameta.logger

object Rewrite {
  def main(args: Array[String]): Unit = {
    // A mirror is a gateway into the scala.meta semantic API.
    // The majority of semantic APIs require an implicit mirror.
    //
    // There are two ways to create a mirror:
    //   1) From an instance of the Scala compiler
    //   2) From a classpath and a sourcepath
    // In this demonstration, we experiment with the second approach.
    //
    // This Mirror constructor relies on the -Dscalameta.sourcepath and -Dscalameta.classpath
    // system properties that are automaticallly configured by the sbt-scalahost.
    implicit val mirror = Mirror()

    // The foundational data structure underlying a mirror is a semantic database,
    // which stores semantic information Scala programs
    // (https://github.com/scalameta/scalameta/issues/605).
    //
    // Semantic databases are automatically generated by scalahost,
    // a compiler plugin that is shipped with scala.meta starting from 1.6.0.
    // In order to enable scalahost, we recommend using the sbt-scalahost sbt plugin.
    //
    // This semantic database is generated from source files in /library/src/main/scala.
    // See build.sbt for more details.
    logger.elem(mirror.database)

    // On top of a semantic database, scala.meta provides high-level semantic APIs.
    // In the current release, there's only `Ref.symbol`, which resolves references
    // to, roughly speaking, fully-qualified names. Future releases will feature more functionality.
    // See https://github.com/scalameta/scalameta/issues/604 for a roadmap.
    println("looking for term...")
    mirror.sources.foreach(source => {
      logger.elem(source)
      implicit val ctx =
        rewrite.RewriteCtx(source, config.ScalafixConfig(), mirror)
      source.collect {
        case ref @ Term.Name("_root_.catz.`SemigroupEx1`.") =>
          logger.elem(ref.symbol)
      }
      val patched =
        Patch(source, Seq(Replace(Symbol("_root_.catz."), q"catzz")))
      logger.elem(patched)
    })
  }
}
